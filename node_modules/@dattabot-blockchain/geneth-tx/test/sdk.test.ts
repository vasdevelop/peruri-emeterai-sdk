import GeneralizeSDK from '../src/SDK/SDK';
import Web3 from 'web3';
import HDWalletProvider from 'truffle-hdwallet-provider';
import { expect } from 'chai';
import * as mocha from 'mocha';
import {attestActionLogParser, attestLogParser, attestResultLogParser, whoAttestLogParser} from '../src/helpers/logParser';
import wallet from 'generated-wallet';


describe('Testing Attestation Contract using SDK',()=>{
    let rpc = process.env['RPC'];
    if (!rpc) rpc = 'https://net.haratoken.app';
    const provider = new HDWalletProvider( 
        process.env['MNEMONIC'],
        rpc
    );
    var web3 = new Web3(provider);
    const initVersion = web3.utils.toHex(12).padEnd(66,'0');
    const initTopic = web3.utils.fromAscii('ktp').padEnd(66, '0');    //bytes32("ktp")
    const initTopic2 = web3.utils.fromAscii('lahan').padEnd(66, '0'); //bytes32("lahan")

    const initValue = web3.utils.fromAscii('ok').padEnd(66, '0');//bytes32("ok")
    const newValue = web3.utils.fromAscii('foto ktp kurang jelas').padEnd(66, '0'); //bytes32("foto ktp kurang jelas")
    
    let initItemAddress = "0xFAC4316F68389f1B1Ec40CB39113Ea8f8bfB8ddd";
    initItemAddress = web3.utils.toChecksumAddress(initItemAddress );
    let owner = "0xFAC4316F68389f1B1Ec40CB39113Ea8f8bfB84c9";
    owner = web3.utils.toChecksumAddress(owner.toLowerCase());
    let sender = "0xFAC4316F68389f1B1Ec40CB39113Ea8f8bfB84c9";
    const initExpiredTime = new Date("Wed, 8 May 2020 13:30:00").getTime();
    const newExpiredTime = new Date("Wed, 12 July 2025 13:30:00").getTime();
    
    var txInfo, receipt, logs, encryptedBytes, concatedBytes;

    var AttestResultLog, AttestActionLog, WhoAttestLog, AttestLog;
    // let SDK = new GeneralizeSDK('0x403273f75eaca76077c1de9ea25582a71ac2f90c'); //ini testing
    let SDK = new GeneralizeSDK('0x6833934d94fb4bebb9a780c5af3848a3de0c1f0e');
    
    before( async ()=>{
        let callback = wallet("apapun");
        sender = await callback.getAddress();
        let obj =  {
            uri : 'attesttest.hara.ethnet',
            fn : 'attest',
            callback,
            params : [
                initVersion,
                initItemAddress,
                initTopic,
                initValue,
                initExpiredTime
            ]
        };

        let data;
        try{
            data = await SDK.fetch(obj);
        }catch(err){
            console.error(err);
        }
        receipt = await SDK.getTransactionReceipt(data.txHash);
        txInfo = await SDK.getTransaction(data.txHash);
        logs = receipt.logs;
        AttestActionLog = logs[1];
        WhoAttestLog = logs[2];
        AttestLog = logs[3];
        AttestActionLog = web3.eth.abi.decodeLog(attestActionLogParser, AttestActionLog.data, AttestActionLog.topics);
        WhoAttestLog = web3.eth.abi.decodeLog(whoAttestLogParser, WhoAttestLog.data, WhoAttestLog.topics.slice(1));
        AttestLog = web3.eth.abi.decodeLog(attestLogParser, AttestLog.data, AttestLog.topics.slice(1));
    })

    describe('Logs are working', async()=>{
        it('AttestActionLog is working', async ()=>{
            concatedBytes = "0x" + web3.utils.numberToHex(initVersion).slice(2).padStart(16, '0') + initItemAddress.slice(2).toLowerCase()
             + initTopic.slice(2) + sender.slice(2).toLowerCase();
            encryptedBytes = web3.utils.keccak256(concatedBytes);
            expect(AttestActionLog.encryptedBytes).to.equal(encryptedBytes);
            expect(AttestActionLog.version).to.equal(initVersion);
            expect(AttestActionLog.itemAddress).to.equal(initItemAddress);
            expect(AttestActionLog.topic).to.equal(initTopic);
            expect(AttestActionLog.value).to.equal(initValue);
            expect(  Number(AttestActionLog.expiredTime)  ).to.equal(initExpiredTime);
            expect(AttestActionLog.attestor).to.equal(sender);
        });

        it('WhoAttestLog is working', async ()=>{
            concatedBytes = "0x" + web3.utils.numberToHex(initVersion).slice(2).padStart(16, '0') + initItemAddress.slice(2).toLowerCase()
             + initTopic.slice(2)+ sender.slice(2).toLowerCase();
            encryptedBytes = web3.utils.keccak256(concatedBytes);
            expect(WhoAttestLog.encryptedBytes).to.equal(encryptedBytes);
            expect(WhoAttestLog.version).to.equal(initVersion);
            expect(WhoAttestLog.itemAddress).to.equal(initItemAddress);
            expect(WhoAttestLog.topic).to.equal(initTopic);
            expect(WhoAttestLog.attestor).to.equal(sender);
        });

        it('AttestLog is working', async ()=>{
            concatedBytes = "0x" + web3.utils.numberToHex(initVersion).slice(2).padStart(16, '0') + initItemAddress.slice(2).toLowerCase()
             + initTopic.slice(2) + sender.slice(2).toLowerCase();
            encryptedBytes = web3.utils.keccak256(concatedBytes);
            expect(AttestLog.encryptedBytes).to.equal(encryptedBytes);
            expect(AttestLog.version).to.equal(initVersion);
            expect(AttestLog.itemAddress).to.equal(initItemAddress);
            expect(AttestLog.topic).to.equal(initTopic);
            expect(AttestLog.attestor).to.equal(sender);
        });
    })

    describe('Getters are working', async()=>{
        let obj;
        before( async ()=>{
            let callback = wallet("apapun");
            obj =  {
                uri : 'attesttest.hara.ethnet',
                fn : '',
                callback,
                params : [
                    initVersion,
                    initItemAddress,
                    initTopic,
                    sender
                ]
            };
        });

        it('can getExpiredTime', async ()=>{
            obj.fn = 'getExpiredTime';
            const expired = await SDK.fetch(obj);
            expect( web3.utils.hexToNumber(expired.result) ).to.equal( initExpiredTime  );
        });
    
        it('can getValue', async ()=>{
            obj.fn = 'getValue';
            const value = await SDK.fetch(obj);
            expect( value.result ) .to.equal( initValue  );
        });    
        
        it('can use getPastEvents', async ()=>{
            let events = await SDK.getPastEvents(obj.uri, 'AttestLog', {
                version:[initVersion],
                itemAddress:[initItemAddress],
            });
            expect(events.length).to.greaterThan(0);
        })

    })
    
    describe('overwrite previous state', async()=>{
        
        before(async()=>{
            let callback = wallet("apapun");

            let obj =  {
                uri : 'attesttest.hara.ethnet',
                fn : 'attest',
                callback,
                params : [
                    initVersion,
                    initItemAddress,
                    initTopic,
                    newValue,
                    newExpiredTime
                ]
            };

            let data;
            try{
                data = await SDK.fetch(obj);
            }catch(err){
                console.log(err);
            }
            receipt = await SDK.getTransactionReceipt(data.txHash);
            logs = receipt.logs;
            AttestResultLog = logs[0];
            AttestResultLog = web3.eth.abi.decodeLog(attestResultLogParser, AttestResultLog.data, AttestResultLog.topics.slice(1));
        })

        it('AttestResultLog is working', async ()=>{
            concatedBytes = "0x" + web3.utils.numberToHex(initVersion).slice(2).padStart(16, '0') + initItemAddress.slice(2).toLowerCase()
             + initTopic.slice(2) + sender.slice(2).toLowerCase();
            encryptedBytes = web3.utils.keccak256(concatedBytes);
            expect(AttestResultLog.encryptedBytes).to.equal(encryptedBytes);
            expect(AttestResultLog.prevValue).to.equal(initValue);
            expect(AttestResultLog.newValue).to.equal(newValue);
            expect(web3.utils.hexToNumber(AttestResultLog.prevExpiredTime)).to.equal(initExpiredTime);
            expect(web3.utils.hexToNumber(AttestResultLog.newExpiredTime)).to.equal(newExpiredTime);
        });
    })

    describe('using set RPC', async () =>{
        it('can set rpc and connect web3', async() => {            
            let result = await SDK.setRPC('https://mainnet.infura.io/v3/519832fbe67b4414a02181e2ca05039c');
            expect(result.currentProvider.host).to.equal('https://mainnet.infura.io/v3/519832fbe67b4414a02181e2ca05039c');
        
            // don't update if rpc is invalid
            result = await SDK.setRPC('https:.haraton.ap');
            expect(result).to.equal(false);
            
            result = await SDK.setRPC('https://net.haratoken.app');
            expect(result.currentProvider.host).to.equal('https://net.haratoken.app');

        });
    })

    describe('using address', async () =>{
        it('can use pre-defined address as parameter', async () => {
            let obj = {
                uri: 'haratoken.hara.ethnet',
                fn: 'totalSupply',
                addr: '0x2d8290c5e1Ee01F5D2376DcD1484245AFC9DC8A5',
                params: [],
            }
            let contract = await SDK.fetch(obj);
            expect(contract).to.have.property('result'); console.log('aa');

            //if addr isn't valid then fetch failed
            obj.addr = '0xsomething';
            SDK.fetch(obj).then(() => {
                    expect(1).to.equal(2);
                }).catch((err) => {
                    expect(1).to.equal(1); 
                });
            // chai4 & chai canary still have async issues
        })
    })

    describe('0 price', async () => {
        it('can use 0 gas price on private net', async () => {
            expect(txInfo.gasPrice).to.equal('0');
        })

        it('can use estimate gas price on non-private net', async () => {
            console.log(await SDK.setRPC("https://rinkeby.infura.io/v3/519832fbe67b4414a02181e2ca05039c"));
            let callback = wallet('apapun');
            let obj = {
                uri: 'datastore.class',
                fn: 'setMetadata',
                addr: '0xe9fE8c3d806b9F708671E2a6F0DA62b270B4171c',
                params: [
                    '0x2361458367e696363fbcc70777d07ebbd2394e89fd0adcaf147faccd1d294d60',
                    '0xb9a5dc0048db9a7d13548781df3cd4b2334606391f75f40c14225a92f4cb3537'
                ],
                callback
            }
            let result = await SDK.fetch(obj);
            result = await SDK.getTransaction(result.txHash);
        })
    })
})


