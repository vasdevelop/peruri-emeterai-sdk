import GeneralizeSDK from '../src/SDK/SDK';
import Web3 from 'web3';
import HDWalletProvider from 'truffle-hdwallet-provider';
import { expect } from 'chai';
import * as mocha from 'mocha';
import wallet from 'generated-wallet'
import namehash from 'eth-ens-namehash';

async function getOwner(node){
    let SDK = new GeneralizeSDK();
    let callback = wallet("apapun");
    let obj =  {
        uri : 'hnsregistrytest.hara.ethnet',
        fn : 'owner',
        callback,
        params : [
            node,
        ]
    };
    let data = await SDK.fetch(obj);
    return data.result;
}

async function registerOwner(node, _label, owner){

    let callback = wallet("apapun");
    let SDK = new GeneralizeSDK();
    let obj =  {
        uri : 'ownerregistrartest.hara.ethnet',
        fn : 'register',
        callback,
        params : [
            node,
            _label,
            owner
        ]
    };
    let data = await SDK.fetch(obj);
    return data;

}

describe('Testing OwnerRegistrar contract using SDK',()=>{

    let rpc = process.env['RPC'];
    if (!rpc) rpc = 'https://net.haratoken.app';
    const provider = new HDWalletProvider( 
        process.env['MNEMONIC'],
        rpc
    );

    var web3 = new Web3(provider);
    let receipt;
    let initItemAddress = "0xFAC4316F68389f1B1Ec40CB39113Ea8f8bfB8ddd";
    initItemAddress = web3.utils.toChecksumAddress(initItemAddress );
    let owner = "0xFAC4316F68389f1B1Ec40CB39113Ea8f8bfB84cc";
    owner = web3.utils.toChecksumAddress(owner.toLowerCase());

    let node = namehash.hash("test");
    let _label = web3.utils.sha3("jonas");
    const owner2 = "0x869F01699D2afed5Dc20E7Ed0aA971C4035d04b2";
    const notOwner = "0xC6D3bb11475f8EeBe0A8c32338B53B054C1bc3a2";
    let SDK = new GeneralizeSDK('0x6833934d94fb4bebb9a780c5af3848a3de0c1f0e');
    before( async ()=>{
        let callback = wallet("apapun");

        let data;
        try{
            data = await registerOwner(node,_label,owner);
        }catch(err){
            console.log(err);
        }
        receipt = await SDK.getTransactionReceipt(data.txHash);
    })

    it('Check new owner', async()=>{
        const theOwner = await getOwner(namehash.hash("jonas.test"));
        expect(theOwner).to.equal( owner );
    });

    it('Overwrite', async()=>{
        let data = await registerOwner( node, _label, owner2 );
        receipt = await SDK.getTransactionReceipt(data.txHash);
        const newOwner = await getOwner(namehash.hash("jonas.test"));
        expect(newOwner).to.equal(owner2);
    }); 

    describe('Negative test', async()=>{
        it('cannot register if not owner ', async()=>{

            let callback = wallet("BlockchainDev098");
            
            let obj =  {
                uri : 'ownerregistrartest.hara.ethnet',
                fn : 'register',
                callback,
                params : [
                    namehash.hash("abcdef"),
                    _label,
                    owner
                ]
            };
            let data;
            try{
                data = await SDK.fetch(obj);
            }catch(err){
                expect(err.message.search('revert')).greaterThan(0); //expectRevert
            }
        })
        
        it('gets 0x0', async()=>{
            const owner = await getOwner(namehash.hash("test.test"));
            expect( owner.padEnd(66,'0')  ).to.equal( web3.utils.asciiToHex('').padEnd(66,'0') );
        })

    })
})